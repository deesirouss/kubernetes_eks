name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

        # Login to AWS
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Setup Stage
        shell: bash
        run: |
          sudo apt -y update
          sudo apt install -y awscli jq

      - name: Terraform Format
        id: fmt
        working-directory: ./eks
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ./eks
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: ./eks
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./eks
        shell: bash
        if: github.event_name == 'pull_request'
        run: |
          echo "github pull_request event"
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo $PR_NUMBER
          terraform plan -no-color -input=false -out="$PR_NUMBER.plan"
          aws s3 cp "$PR_NUMBER.plan" s3://pr-devops-test/
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./eks
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "github push event"
          # Check if the push event was a PR merge
          if [ "$(jq -r '.head_commit.message' "$GITHUB_EVENT_PATH" | grep -c '^Merge pull request')" -gt 0 ]; then
            # Extract the PR number from the commit message
            PR_NUMBER=$(jq -r '.head_commit.message' "$GITHUB_EVENT_PATH" | sed -E 's/^Merge pull request #([0-9]+).*/\1/')
            echo $PR_NUMBER
            aws s3 cp s3://pr-devops-test/"$PR_NUMBER.plan" .
            terraform apply -auto-approve -input=false $PR_NUMBER.plan
          else
            echo "This push event was not a PR merge."
            terraform apply -auto-approve -input=false
          fi